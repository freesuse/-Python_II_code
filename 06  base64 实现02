#自己实现对一段字符串进行base64编码
alphabet = b"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijkImnopqrstuvwxyz0123456789+/"

#teststr = "abcd"
teststr = "ManMa"

def base64(src):
    ret = bytearray()
    length = len(src)
    # r记录补0的个数
    r=0
    for offset in range(0,length,3):   #3个字符为一组进行边界判断
        if offset + 3 <= length:
            triple = src[offset:offset + 3]
        else:
            triple = src[offset:]
            r = 3 - len(triple)
            triple = triple + '\x00'*r  #补几个0，\x00的结果为转义字符0，此处的0为ascii码的0，不是数字0

        #print(triple,r)
        #将3个字节看成个整体转成字 节bytes,大端模式(随着地址增加大小也增加)
        #abc => 0x616263
        b = int.from_bytes(triple.encode(),'big')  #小端模式为'little'，此处将字符串当作数字处理
        #triple.encode()默认按照UTF-8进行编码,编码之后的格式为 bytes
        print(hex(b))

        # 01100001 01100010 01100011  #abc
        # 011000 010110 001001 100011 #每6位断开
        for i in range(18,-1,-6):
            if i==18:
                index = b>>i
            else:
                index = (b>>i) & 0x3F   #0b0011 1111
            ret. append(alphabet[index]) #得到base64编码的列表
        #策略是不管是不是补零,都填满,只有最后一次可能出现补零的
        #在最后替换掉就是了,代码清晰,而且替换至多2次
        #在上一个循环中判断 r!=0, 效率可能会高些
        for i in range(1,r+1):   #1到r,补几个0替换几个=
            ret[-i] = 0x3D   #此处为=号的ascii码
    return bytes(ret)
print(base64(teststr))


#base64实现
import base64
print(base64.b64encode(teststr.encode()))
